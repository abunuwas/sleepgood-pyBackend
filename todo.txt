## Create day in shell

from sleepCalendar.models import Day
from sleepCalendar.serializers import DaySerializer
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser
from django.contrib.auth.models import User

user_obj = User.objects.get(id=1) # set user_id i.e '1'
day = Day(sleepingQuality='good', tirednessFeeling='good', uuid='12341414', user=user_obj)
day.save()

## Check serializer

serializer = DaySerializer(day)
serializer.data
# output

content = JSONRenderer().render(serializer.data)
content #byte object


>>> from django.utils.six import BytesIO
>>> stream = BytesIO(content)
>>> data = JSONParser().parse(stream)

>>> serializer = DaySerializer(data=data)
>>> serializer.is_valid()

### Create user

INSERT INTO auth_user (id, password, last_login, is_superuser, first_name, last_name, email, is_staff, is_active, date_joined, username) VALUES (1, 'pbkdf2_sha256$24000$985d40H5kkET$Sv62MQm/JF5sfWhiHGfVyvcE6zlYhQgjlPHa6m6SDEo=', '2016-08-18 08:54:12.401626', true, 'Pepito', 'Grillo', 'j@j.com', false, true, '2016-03-02 18:52:57.991763', 'carlos');


TODO

- User model
- CSRF
- More tests to ensure everything works properly.
- Allow to modify / delete / insert several entries in one call or only one per call?
- Traditional registration with mail & pwd
- Modify json response to ensure every function returns what the client expects.
- In some functions I expect a json request (update, delete), check with Vicens that this is possible, or what should I expect?

- Define the JSON response that will go to the fron-end after calling the insertCalendarEntry and
  the updateCalendarEntry views. Also for the DELETE method. One possibility is returning the json 
  with the inuptted data, together with an additional field with the key 'operation', and possible 
  values 'success' or 'failure'. After this, all functions should redirect to the getCalendarEntriesByYear
  function since, after this operation, I guess the user will be displayed with his calendar, together
  with a message informing him whether the previous operation was successful or not. Right?

 - Try to implement a Django form for the forms of the application, so we can take advantage of Django's
   forms validation methods. See if it's possible to bind the data from the json to the Django form. 

- Ensure that all the data coming to a function, whether it's from a form or not, is what is expected to be.
  For example, ensure that the dates have the expected format, userId is a number, etc. 

- Sanitize input, especially for the database, to avoid sql injection attacks. 

- Define user model. I think that a first model can be:

USER:
- primary_key
- fist_name
- second_name
- username
- birht_date
- email
- foreign key to their calendar table? 
- data_created
- date_modified
* string representation: username
* Include on_delete => CASCADE to remove their entries whenever their profile is deleted. 

- Upload application to server.

- Selenium tests. 